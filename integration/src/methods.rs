use crate::{
    multistep::{LinearMultistep, Substepper},
    runge_kutta::{AdaptiveRungeKutta, FixedRungeKutta},
};

pub type RK4 = FixedRungeKutta<coeffs::RK4>;

pub type CashKarp45<T> = AdaptiveRungeKutta<coeffs::CashKarp45, T>;
pub type DormandPrince54<T> = AdaptiveRungeKutta<coeffs::DormandPrince54, T>;
pub type DormandPrince87<T> = AdaptiveRungeKutta<coeffs::DormandPrince87, T>;
pub type Fehlberg45<T> = AdaptiveRungeKutta<coeffs::Felhberg45, T>;
pub type Tsitouras75<T> = AdaptiveRungeKutta<coeffs::Tsitouras75, T>;
pub type Verner87<T> = AdaptiveRungeKutta<coeffs::Verner87, T>;

pub type Tsitouras75Nystrom<T> = AdaptiveRungeKutta<coeffs::Tsitouras75Nystrom, T>;

pub type Fine45<T> = AdaptiveRungeKutta<coeffs::Fine45, T>;

pub type BlanesMoan6B = FixedRungeKutta<coeffs::BlanesMoan6B>;
pub type BlanesMoan11B = FixedRungeKutta<coeffs::BlanesMoan11B>;
pub type BlanesMoan14A = FixedRungeKutta<coeffs::BlanesMoan14A>;
pub type ForestRuth = FixedRungeKutta<coeffs::ForestRuth>;
pub type McLachlanO4 = FixedRungeKutta<coeffs::McLachlanO4>;
pub type McLachlanSS17 = FixedRungeKutta<coeffs::McLachlanSS17>;
pub type Pefrl = FixedRungeKutta<coeffs::Pefrl>;
pub type Ruth = FixedRungeKutta<coeffs::Ruth>;

pub type AdamsBashforth2<S = RK4> = LinearMultistep<coeffs::AdamsBashforth2, S>;
pub type AdamsBashforth3<S = RK4> = LinearMultistep<coeffs::AdamsBashforth3, S>;
pub type AdamsBashforth4<S = RK4> = LinearMultistep<coeffs::AdamsBashforth4, S>;
pub type AdamsBashforth5<S = Substepper<2, RK4>> = LinearMultistep<coeffs::AdamsBashforth5, S>;
pub type AdamsBashforth6<S = Substepper<2, RK4>> = LinearMultistep<coeffs::AdamsBashforth6, S>;

pub type QuinlanTremaine12<S = Substepper<4, BlanesMoan6B>> =
    LinearMultistep<coeffs::QuinlanTremaine12, S>;
pub type Stormer13<S = Substepper<4, BlanesMoan6B>> = LinearMultistep<coeffs::Stormer13, S>;

pub mod coeffs {
    use crate::{
        Problem, SecondOrderState,
        multistep::{ELM1, ELM1Coefficients, ELM2, ELM2Coefficients, LMCoefficients},
        runge_kutta::{
            EERKCoefficients, EERKNCoefficients, EERKNGCoefficients, ERK, ERKCoefficients, ERKN,
            ERKNCoefficients, ERKNG, ERKNGCoefficients, RKCoefficients, SRKN, SRKNCoefficients,
        },
    };

    #[doc(hidden)]
    #[derive(Debug, Clone, Copy)]
    pub struct RK4;
    impl<P: Problem> RKCoefficients<P> for RK4 {
        type Instance = ERK<Self, [P::State; 4]>;
    }
    impl ERKCoefficients for RK4 {
        const FSAL: bool = false;

        const ORDER: u32 = 4;

        const A: &'static [&'static [f64]] =
            &[&[], &[1.0 / 2.0], &[0.0, 1.0 / 2.0], &[0.0, 0.0, 1.0]];

        const B: &'static [f64] = &[1.0 / 6.0, 1.0 / 3.0, 1.0 / 3.0, 1.0 / 6.0];

        const C: &'static [f64] = &[0.0, 1.0 / 2.0, 1.0 / 2.0, 1.0];
    }

    #[doc(hidden)]
    #[derive(Debug, Clone, Copy)]
    pub struct CashKarp45;
    impl<P: Problem> RKCoefficients<P> for CashKarp45 {
        type Instance = ERK<Self, [P::State; 6]>;
    }
    impl ERKCoefficients for CashKarp45 {
        const FSAL: bool = false;

        const ORDER: u32 = 4;

        const A: &'static [&'static [f64]] = &[
            &[],
            &[1.0 / 5.0],
            &[3.0 / 40.0, 9.0 / 40.0],
            &[3.0 / 10.0, -9.0 / 10.0, 6.0 / 5.0],
            &[-11.0 / 54.0, 5.0 / 2.0, -70.0 / 27.0, 35.0 / 27.0],
            &[
                1631.0 / 55296.0,
                175.0 / 512.0,
                575.0 / 13824.0,
                44275.0 / 110592.0,
                253.0 / 4096.0,
            ],
        ];

        const B: &'static [f64] = &[
            2825.0 / 27648.0,
            0.0,
            18575.0 / 48384.0,
            13525.0 / 55296.0,
            277.0 / 14336.0,
            0.25,
        ];

        const C: &'static [f64] = &[0.0, 1.0 / 5.0, 3.0 / 10.0, 3.0 / 5.0, 1.0, 7.0 / 8.0];
    }
    impl EERKCoefficients for CashKarp45 {
        const ORDER_EMBEDDED: u32 = 5;

        const E: &'static [f64] = {
            const BH: &[f64] = &[
                37.0 / 378.0,
                0.0,
                250.0 / 621.0,
                125.0 / 594.0,
                0.0,
                512.0 / 1771.0,
            ];

            &[
                Self::B[0] - BH[0],
                Self::B[1] - BH[1],
                Self::B[2] - BH[2],
                Self::B[3] - BH[3],
                Self::B[4] - BH[4],
                Self::B[5] - BH[5],
            ]
        };
    }

    #[doc(hidden)]
    #[derive(Debug, Clone, Copy)]
    pub struct DormandPrince54;
    impl<P: Problem> RKCoefficients<P> for DormandPrince54 {
        type Instance = ERK<Self, [P::State; 7]>;
    }
    impl ERKCoefficients for DormandPrince54 {
        const FSAL: bool = true;

        const ORDER: u32 = 5;

        const A: &'static [&'static [f64]] = &[
            &[],
            &[1.0 / 5.0],
            &[3.0 / 40.0, 9.0 / 40.0],
            &[44.0 / 45.0, -56.0 / 15.0, 32.0 / 9.0],
            &[
                19372.0 / 6561.0,
                -25360.0 / 2187.0,
                64448.0 / 6561.0,
                -212.0 / 729.0,
            ],
            &[
                9017.0 / 3168.0,
                -355.0 / 33.0,
                46732.0 / 5247.0,
                49.0 / 176.0,
                -5103.0 / 18656.0,
            ],
            &[
                35.0 / 384.0,
                0.0,
                500.0 / 1113.0,
                125.0 / 192.0,
                -2187.0 / 6784.0,
                11.0 / 84.0,
            ],
        ];

        const B: &'static [f64] = &[
            Self::A[6][0],
            Self::A[6][1],
            Self::A[6][2],
            Self::A[6][3],
            Self::A[6][4],
            Self::A[6][5],
            0.0,
        ];

        const C: &'static [f64] = &[0.0, 1.0 / 5.0, 3.0 / 10.0, 4.0 / 5.0, 8.0 / 9.0, 1.0, 1.0];
    }
    impl EERKCoefficients for DormandPrince54 {
        const ORDER_EMBEDDED: u32 = 4;

        const E: &'static [f64] = {
            const BH: &[f64] = &[
                5179.0 / 57600.0,
                0.0,
                7571.0 / 16695.0,
                393.0 / 640.0,
                -92097.0 / 339200.0,
                187.0 / 2100.0,
                1.0 / 40.0,
            ];

            &[
                Self::B[0] - BH[0],
                Self::B[1] - BH[1],
                Self::B[2] - BH[2],
                Self::B[3] - BH[3],
                Self::B[4] - BH[4],
                Self::B[5] - BH[5],
                Self::B[6] - BH[6],
            ]
        };
    }

    #[doc(hidden)]
    #[derive(Debug, Clone, Copy)]
    pub struct DormandPrince87;
    impl<P: Problem> RKCoefficients<P> for DormandPrince87 {
        type Instance = ERK<Self, [P::State; 13]>;
    }
    impl ERKCoefficients for DormandPrince87 {
        const FSAL: bool = false;

        const ORDER: u32 = 8;

        const A: &'static [&'static [f64]] = &[
            &[],
            &[1.0 / 18.0],
            &[1.0 / 48.0, 1.0 / 16.0],
            &[1.0 / 32.0, 0.0, 3.0 / 32.0],
            &[5.0 / 16.0, 0.0, -75.0 / 64.0, 75.0 / 64.0],
            &[3.0 / 80.0, 0.0, 0.0, 3.0 / 16.0, 3.0 / 20.0],
            &[
                29443841.0 / 614563906.0,
                0.0,
                0.0,
                77736538.0 / 692538347.0,
                -28693883.0 / 1125000000.0,
                23124283.0 / 1800000000.0,
            ],
            &[
                16016141.0 / 946692911.0,
                0.0,
                0.0,
                61564180.0 / 158732637.0,
                22789713.0 / 633445777.0,
                545815736.0 / 2771057229.0,
                -180193667.0 / 1043307555.0,
            ],
            &[
                39632708.0 / 573591083.0,
                0.0,
                0.0,
                -433636366.0 / 683701615.0,
                -421739975.0 / 2616292301.0,
                100302831.0 / 723423059.0,
                790204164.0 / 839813087.0,
                800635310.0 / 3783071287.0,
            ],
            &[
                246121993.0 / 1340847787.0,
                0.0,
                0.0,
                -37695042795.0 / 15268766246.0,
                -309121744.0 / 1061227803.0,
                -12992083.0 / 490766935.0,
                6005943493.0 / 2108947869.0,
                393006217.0 / 1396673457.0,
                123872331.0 / 1001029789.0,
            ],
            &[
                -1028468189.0 / 846180014.0,
                0.0,
                0.0,
                8478235783.0 / 508512852.0,
                1311729495.0 / 1432422823.0,
                -10304129995.0 / 1701304382.0,
                -48777925059.0 / 3047939560.0,
                15336726248.0 / 1032824649.0,
                -45442868181.0 / 3398467696.0,
                3065993473.0 / 597172653.0,
            ],
            &[
                185892177.0 / 718116043.0,
                0.0,
                0.0,
                -3185094517.0 / 667107341.0,
                -477755414.0 / 1098053517.0,
                -703635378.0 / 230739211.0,
                5731566787.0 / 1027545527.0,
                5232866602.0 / 850066563.0,
                -4093664535.0 / 808688257.0,
                3962137247.0 / 1805957418.0,
                65686358.0 / 487910083.0,
            ],
            &[
                403863854.0 / 491063109.0,
                0.0,
                0.0,
                -5068492393.0 / 434740067.0,
                -411421997.0 / 543043805.0,
                652783627.0 / 914296604.0,
                11173962825.0 / 925320556.0,
                -13158990841.0 / 6184727034.0,
                3936647629.0 / 1978049680.0,
                -160528059.0 / 685178525.0,
                248638103.0 / 1413531060.0,
                0.0,
            ],
        ];

        const B: &'static [f64] = &[
            14005451.0 / 335480064.0,
            0.0,
            0.0,
            0.0,
            0.0,
            -59238493.0 / 1068277825.0,
            181606767.0 / 758867731.0,
            561292985.0 / 797845732.0,
            -1041891430.0 / 1371343529.0,
            760417239.0 / 1151165299.0,
            118820643.0 / 751138087.0,
            -528747749.0 / 2220607170.0,
            1.0 / 4.0,
        ];

        const C: &'static [f64] = &[
            0.0,
            1.0 / 18.0,
            1.0 / 12.0,
            1.0 / 8.0,
            5.0 / 16.0,
            3.0 / 8.0,
            59.0 / 400.0,
            93.0 / 200.0,
            5490023248.0 / 9719169821.0,
            13.0 / 20.0,
            1201146811.0 / 1299019798.0,
            1.0,
            1.0,
        ];
    }
    impl EERKCoefficients for DormandPrince87 {
        const ORDER_EMBEDDED: u32 = 7;

        const E: &'static [f64] = {
            const BH: &[f64] = &[
                13451932.0 / 455176623.0,
                0.0,
                0.0,
                0.0,
                0.0,
                -808719846.0 / 976000145.0,
                1757004468.0 / 5645159321.0,
                656045339.0 / 265891186.0,
                -3867574721.0 / 1518517206.0,
                465885868.0 / 322736535.0,
                53011238.0 / 667516719.0,
                2.0 / 45.0,
                0.0,
            ];

            &[
                Self::B[0] - BH[0],
                Self::B[1] - BH[1],
                Self::B[2] - BH[2],
                Self::B[3] - BH[3],
                Self::B[4] - BH[4],
                Self::B[5] - BH[5],
                Self::B[6] - BH[6],
                Self::B[7] - BH[7],
                Self::B[8] - BH[8],
                Self::B[9] - BH[9],
                Self::B[10] - BH[10],
                Self::B[11] - BH[11],
                Self::B[12] - BH[12],
            ]
        };
    }

    #[doc(hidden)]
    #[derive(Debug, Clone, Copy)]
    pub struct Felhberg45;
    impl<P: Problem> RKCoefficients<P> for Felhberg45 {
        type Instance = ERK<Self, [P::State; 6]>;
    }
    impl ERKCoefficients for Felhberg45 {
        const FSAL: bool = false;

        const ORDER: u32 = 4;

        const A: &'static [&'static [f64]] = &[
            &[],
            &[1.0 / 4.0],
            &[3.0 / 32.0, 9.0 / 32.0],
            &[1932.0 / 2197.0, -7200.0 / 2197.0, 7296.0 / 2197.0],
            &[439.0 / 216.0, -8.0, 3680.0 / 513.0, -845.0 / 4104.0],
            &[
                -8.0 / 27.0,
                2.0,
                -3544.0 / 2565.0,
                1859.0 / 4104.0,
                -11.0 / 40.0,
            ],
        ];

        // Integration is continued with the 4th order solution.
        const B: &'static [f64] = &[
            25.0 / 216.0,
            0.0,
            1408.0 / 2565.0,
            2197.0 / 4104.0,
            -1.0 / 5.0,
            0.0,
        ];

        const C: &'static [f64] = &[0.0, 1.0 / 4.0, 3.0 / 8.0, 12.0 / 13.0, 1.0, 1.0 / 2.0];
    }
    impl EERKCoefficients for Felhberg45 {
        const ORDER_EMBEDDED: u32 = 5;

        const E: &'static [f64] = {
            const BH: &[f64] = &[
                16.0 / 135.0,
                0.0,
                6656.0 / 12825.0,
                28561.0 / 56430.0,
                -9.0 / 50.0,
                2.0 / 55.0,
            ];

            &[
                BH[0] - Self::B[0],
                BH[1] - Self::B[1],
                BH[2] - Self::B[2],
                BH[3] - Self::B[3],
                BH[4] - Self::B[4],
                BH[5] - Self::B[5],
            ]
        };
    }

    #[doc(hidden)]
    #[derive(Debug, Clone, Copy)]
    pub struct Verner87;
    impl<P: Problem> RKCoefficients<P> for Verner87 {
        type Instance = ERK<Self, [P::State; 13]>;
    }
    impl ERKCoefficients for Verner87 {
        const FSAL: bool = false;

        const ORDER: u32 = 8;

        const A: &'static [&'static [f64]] = &[
        &[],
        &[1.0 / 4.0],
        &[25374388559.0 / 290322000000.0, 7399612441.0 / 290322000000.0],
        &[86021.0 / 2032000.0, 0.0, 258063.0 / 2032000.0],
        &[
            394117287349.0 / 924951555125.0,
            0.0,
            -1478808184872.0 / 924951555125.0,
            1476870356896.0 / 924951555125.0,
        ],
        &[
            21806069.0 / 429936000.0,
            0.0,
            0.0,
            2085253894.0 / 8198887125.0,
            67122964561.0 / 329119824000.0,
        ],
        &[
            -10767669849309.0 / 37129416272000.0,
            0.0,
            0.0,
            107549272780798434.0 / 80010624633743375.0,
            -1571425354197.0 / 548533040000.0,
            195974150961.0 / 73190382500.0,
        ],
        &[
            122914197.0 / 1247416480.0,
            0.0,
            0.0,
            0.0,
            2834577.0 / 12772576.0,
            -1123911.0 / 6195548.0,
            1003245.0 / 91667332.0,
        ],
        &[
            7516815761873698650240937021297888610305781198156454914018066425686713809124.0
                / 19417750920086037142705440148991358353524951455336635926349428617092008016799.0,
            0.0,
            0.0,
            -2970280712345026029784493078033500603558797778620788610891609609625083520000000.0
                / 2059197881322255811366824379732129118957063276855086357832879720044283034195609.0,
            160883051099229570661648871967605637311447402857798976770144318499344176200.0
                / 55373838844007112802284696674027443630749586849658020349496486226959885797.0,
            -531291044569132007849980767445890096567679581535833821522948115776782916800.0
                / 286600138103969709516639731800408929385020510549016787456022559956334619913.0,
            92917760295507691123384296375592154091398238056386167422408760067912000.0
                / 663525387387781548392930054085313627947883220329590736767284727992793459.0,
            16582882008248100072444682934459438760351720266822956376058566080.0
                / 28953624935338209620540938361130162616618239541632595427443431123.0,
        ],
        &[
            -397907419247815925921130059686865048509124.0 / 2467734205602744466122026313943800290709375.0,
            0.0,
            0.0,
            -12397380504027867540933244272640.0 / 71497487771289358131961402817451.0,
            -938215172932764769802614036208.0 / 720988934849815411624418693625.0,
            39294182008628611505961825730565883738506112.0
                / 34530663960302355453963385168366837619171375.0,
            -44522287344548287709730039702917122688.0 / 1402380579847472465941191457456761953225.0,
            20222100246339043804092120397184.0 / 21662367405707901792558292907875.0,
            -30521958981544768864151899144647092370777642374348985368652529884.0
                / 364283329166067503011761408054691133551081505869170977618646228125.0,
        ],
        &[
            -7874248153103427073301520825686819245245713313.0
                / 410128949126757953376487799591079982676499635200.0,
            0.0,
            0.0,
            592147767606693369421771800000.0 / 2166590538523919943392769782347.0,
            -3777316336297553135210313111.0 / 5593126282471295314419732896.0,
            160775746506894169042900490691204481389877265439.0
                / 470767315337957626238784466576517627715500536844.0,
            -507593940096706904938228151863398894238905405.0
                / 7470102369519587845109530946292707809479335476.0,
            173196146788876378135182681744256899.0 / 1793073867682496036448646518502714730.0,
            937132687483187059957479559988037034595389945431346986697458481846645979573026347.0
                / 7071054501415007346897024777503547537721817297910549006214731593062974677881100800.0,
            116416656136756811965545.0 / 315877857843708025406464.0,
        ],
        &[
            28191405932827173126309408200664465069287507375903.0
                / 46277040828099807659589313374497236005056822803488.0,
            0.0,
            0.0,
            -429380072388144504981858700675520000000.0 / 188940382517997566021881003968356031669.0,
            24173887609985281514926963208103700.0 / 5080791111711202068770238453613777.0,
            -54881449674479480016593038012420742831966782264181600.0
                / 9949308922521596315581680829335134273237927944004721.0,
            970969892075126686370480622782649944320946827348000.0
                / 3347483649309697775724736894621937483768621235854151.0,
            77411823900067580361972977027037723040.0 / 136014860952969119034946902128158999209.0,
            656779806953299263849114640553093566236946159841995197013788762083697980273440465097410146645645.0
                / 828556489672666107963907105193770544832899849879697116662334249174938654251472014083110713914032.0,
            3147129425650261440272289698280046875.0 / 20338543888980253307598069078752387872.0,
            425854850025102447819650719213220000.0 / 263691965699784622774911587349396263.0,
        ],
        &[
            3621456146894606285894995339383850874108700148373.0
                / 4081168693163363596994878822807031005774876048608.0,
            0.0,
            0.0,
            -3817583686059663366913679467944640000000.0 / 1283023117642128560298752783599596583383.0,
            193234496869635405437524415902310900.0 / 34501742641572006835386893540142539.0,
            -87974988257716022018037206149145819377007277738400.0
                / 14871674463411999056342756887683215806741009406229.0,
            3275133743198491987936602396440511473300401684000.0
                / 14866908561378488620343856456061248578257652060133.0,
            8526827543558748199980436728262708480.0 / 83965981332240915696885276969279079833.0,
            39009210105998257555064429930449313140180415214883261536546755024187088643232941505.0
                / 33878790250537583879968593309051059917530985063051045330469429477091985229650821808.0,
            266248736648182734031056196146328125.0 / 137973433143769650633804707559140704.0,
            0.0,
            0.0,
        ],
    ];

        const B: &'static [f64] = &[
        105711409411029096011.0 / 2363345366733216286848.0,
        0.0,
        0.0,
        0.0,
        0.0,
        49144903996079337500000000000.0 / 313203740909075359159534015851.0,
        122908398183230837500000000000.0 / 665774200882383246774037878723.0,
        14734515405327276428000.0 / 65439093723444914604579.0,
        98855236015768950806532226039371426875067857784942240050406497922541356709067743917330653.0
            / 668183874060994347945818441723205177438829897987551586564757651033104640132059340614221120.0,
        80375815959623894921875.0 / 1056804190408540040777856.0,
        48020889007901260000.0 / 391135894718289455007.0,
        1146762646211206909.0 / 27426666521711241540.0,
        0.0,
    ];

        const C: &'static [f64] = &[
            0.0,
            1.0 / 4.0,
            86021.0 / 762000.0,
            86021.0 / 508000.0,
            53.0 / 125.0,
            509.0 / 1000.0,
            867.0 / 1000.0,
            3.0 / 20.0,
            295159845764.0 / 416264491649.0,
            8.0 / 25.0,
            9.0 / 20.0,
            1.0,
            1.0,
        ];
    }
    impl EERKCoefficients for Verner87 {
        const ORDER_EMBEDDED: u32 = 7;

        const E: &'static [f64] = {
            const BH: &[f64] = &[
            415143901557332051.0 / 9054963090931863168.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1392529918457821250000000000.0 / 5308537981509751850161593489.0,
            2142381651020498750000000000.0 / 11176065722246241552561786933.0,
            4735428542080120856000.0 / 21813031241148304868193.0,
            1360794378607602525113722425939330174725374220595898325328629456869721330363.0
                / 10682792599936408020924171586589409694572260337238697644239411829708789571520.0,
            9357212880829926171875.0 / 81292630031426156982912.0,
            0.0,
            0.0,
            7787234078438942063.0 / 191986665651978690780.0,
        ];

            &[
                Self::B[0] - BH[0],
                Self::B[1] - BH[1],
                Self::B[2] - BH[2],
                Self::B[3] - BH[3],
                Self::B[4] - BH[4],
                Self::B[5] - BH[5],
                Self::B[6] - BH[6],
                Self::B[7] - BH[7],
                Self::B[8] - BH[8],
                Self::B[9] - BH[9],
                Self::B[10] - BH[10],
                Self::B[11] - BH[11],
                Self::B[12] - BH[12],
            ]
        };
    }

    #[doc(hidden)]
    #[derive(Debug, Clone, Copy)]
    pub struct Tsitouras75;
    impl<P: Problem> RKCoefficients<P> for Tsitouras75 {
        type Instance = ERK<Self, [P::State; 9]>;
    }
    impl ERKCoefficients for Tsitouras75 {
        const FSAL: bool = false;

        const ORDER: u32 = 7;

        const A: &'static [&'static [f64]] = &[
            &[],
            &[1.0 / 18.0],
            &[0.0, 1.0 / 9.0],
            &[1.0 / 24.0, 0.0, 1.0 / 8.0],
            &[
                2183971.0 / 4000000.0,
                0.0,
                -8340813.0 / 4000000.0,
                3968421.0 / 2000000.0,
            ],
            &[
                695768212.0 / 7463744411.0,
                0.0,
                -1803549175.0 / 7007942496.0,
                3474507053.0 / 6790877290.0,
                2188198899.0 / 15264927763.0,
            ],
            &[
                -11894934857.0 / 8390623634.0,
                0.0,
                53094780276.0 / 9800512003.0,
                -8415376229.0 / 2277049503.0,
                -18647567697.0 / 10138317907.0,
                27551494893.0 / 11905950217.0,
            ],
            &[
                30828057951.0 / 7654644085.0,
                0.0,
                -4511704.0 / 324729.0,
                16217851618.0 / 1651177175.0,
                282768186839.0 / 40694064384.0,
                -104400780537.0 / 15869257619.0,
                5409241639.0 / 9600177208.0,
            ],
            &[
                -133775720546.0 / 36753383835.0,
                0.0,
                49608695511.0 / 4066590848.0,
                -59896475201.0 / 7901259813.0,
                -48035527651.0 / 5727379426.0,
                86266718551.0 / 10188951048.0,
                -7751618114.0 / 23575802495.0,
                2289274942.0 / 8464405725.0,
            ],
        ];

        const B: &'static [f64] = &[
            597988726.0 / 12374436915.0,
            0.0,
            0.0,
            3138312158.0 / 11968408119.0,
            480882843.0 / 7850665645.0,
            988558885.0 / 3512253271.0,
            5302636961.0 / 26425940286.0,
            1259489433.0 / 12163586030.0,
            1016647712.0 / 23899101975.0,
        ];

        const C: &'static [f64] = &[
            0.0,
            1.0 / 18.0,
            1.0 / 9.0,
            1.0 / 6.0,
            89.0 / 200.0,
            56482.0 / 115069.0,
            74.0 / 95.0,
            8.0 / 9.0,
            1.0,
        ];
    }
    impl EERKCoefficients for Tsitouras75 {
        const ORDER_EMBEDDED: u32 = 5;

        const E: &'static [f64] = {
            const BH: &[f64] = &[
                1421940313.0 / 46193547077.0,
                0.0,
                0.0,
                1943068601.0 / 5911217046.0,
                -3019049881.0 / 6506827856.0,
                7688913279.0 / 9493187186.0,
                586186883.0 / 5187186385.0,
                1114095023.0 / 8014791121.0,
                1016647712.0 / 23899101975.0,
            ];

            &[
                Self::B[0] - BH[0],
                Self::B[1] - BH[1],
                Self::B[2] - BH[2],
                Self::B[3] - BH[3],
                Self::B[4] - BH[4],
                Self::B[5] - BH[5],
                Self::B[6] - BH[6],
                Self::B[7] - BH[7],
                Self::B[8] - BH[8],
            ]
        };
    }

    #[doc(hidden)]
    #[derive(Debug, Clone, Copy)]
    pub struct Tsitouras75Nystrom;
    impl<V, P: Problem<State = SecondOrderState<V>>> RKCoefficients<P> for Tsitouras75Nystrom {
        type Instance = ERKN<Self, [V; 7], V>;
    }
    impl ERKNCoefficients for Tsitouras75Nystrom {
        const FSAL: bool = true;

        const ORDER: u32 = 7;

        const A: &'static [&'static [f64]] = &[
            &[],
            &[5107771.0 / 767472028.0],
            &[5107771.0 / 575604021.0, 16661485.0 / 938806552.0],
            &[
                325996677.0 / 876867260.0,
                -397622579.0 / 499461366.0,
                541212017.0 / 762248206.0,
            ],
            &[
                82243160.0 / 364375691.0,
                -515873404.0 / 1213273815.0,
                820109726.0 / 1294837243.0,
                36245507.0 / 242779260.0,
            ],
            &[
                3579594.0 / 351273191.0,
                34292133.0 / 461028419.0,
                267156948.0 / 2671391749.0,
                22665163.0 / 1338599875.0,
                -3836509.0 / 1614789462.0,
            ],
            &[
                53103334.0 / 780726093.0,
                0.0,
                352190060.0 / 1283966121.0,
                37088117.0 / 2206150964.0,
                7183323.0 / 1828127386.0,
                187705681.0 / 1370684829.0,
            ],
        ];

        const BP: &'static [f64] = &[
            <Self as ERKNCoefficients>::A[6][0],
            <Self as ERKNCoefficients>::A[6][1],
            <Self as ERKNCoefficients>::A[6][2],
            <Self as ERKNCoefficients>::A[6][3],
            <Self as ERKNCoefficients>::A[6][4],
            <Self as ERKNCoefficients>::A[6][5],
            0.0,
        ];

        const BV: &'static [f64] = &[
            53103334.0 / 780726093.0,
            0.0,
            244481296.0 / 685635505.0,
            41493456.0 / 602487871.0,
            -45498718.0 / 926142189.0,
            1625563237.0 / 4379140271.0,
            191595797.0 / 1038702495.0,
        ];

        const C: &'static [f64] = &[
            0.0,
            108816483.0 / 943181462.0,
            108816483.0 / 471590731.0,
            151401202.0 / 200292705.0,
            682035803.0 / 631524599.0,
            493263404.0 / 781610081.0,
            1.0,
        ];
    }
    impl EERKNCoefficients for Tsitouras75Nystrom {
        const ORDER_EMBEDDED: u32 = 5;

        const EP: &'static [f64] = {
            const BHP: &[f64] = &[
                41808761.0 / 935030896.0,
                0.0,
                46261019.0 / 135447428.0,
                289298425.0 / 1527932372.0,
                -52260067.0 / 3104571287.0,
                -49872919.0 / 848719175.0,
                0.0,
            ];

            &[
                <Self as ERKNCoefficients>::BP[0] - BHP[0],
                <Self as ERKNCoefficients>::BP[1] - BHP[1],
                <Self as ERKNCoefficients>::BP[2] - BHP[2],
                <Self as ERKNCoefficients>::BP[3] - BHP[3],
                <Self as ERKNCoefficients>::BP[4] - BHP[4],
                <Self as ERKNCoefficients>::BP[5] - BHP[5],
                <Self as ERKNCoefficients>::BP[6] - BHP[6],
            ]
        };

        const EV: &'static [f64] = {
            const BHV: &[f64] = &[
                41808761.0 / 935030896.0,
                0.0,
                224724272.0 / 506147085.0,
                2995752066.0 / 3862177123.0,
                170795979.0 / 811534085.0,
                -177906423.0 / 1116903503.0,
                -655510901.0 / 2077404990.0,
            ];

            &[
                <Self as ERKNCoefficients>::BV[0] - BHV[0],
                <Self as ERKNCoefficients>::BV[1] - BHV[1],
                <Self as ERKNCoefficients>::BV[2] - BHV[2],
                <Self as ERKNCoefficients>::BV[3] - BHV[3],
                <Self as ERKNCoefficients>::BV[4] - BHV[4],
                <Self as ERKNCoefficients>::BV[5] - BHV[5],
                <Self as ERKNCoefficients>::BV[6] - BHV[6],
            ]
        };
    }

    // Fine, J.M. Low order practical Runge-Kutta-Nyström methods. Computing 38, 281–297 (1987). https://link.springer.com/article/10.1007/BF02278707
    #[doc(hidden)]
    #[derive(Debug, Clone, Copy)]
    pub struct Fine45;
    impl<V, P: Problem<State = SecondOrderState<V>>> RKCoefficients<P> for Fine45 {
        type Instance = ERKNG<Self, [V; 7], V>;
    }
    impl ERKNGCoefficients for Fine45 {
        const FSAL: bool = true;

        const ORDER: u32 = 4;

        const AP: &'static [&'static [f64]] = &[
            &[],
            &[32.0 / 1521.0],
            &[4.0 / 169.0, 4.0 / 169.0],
            &[175.0 / 5184.0, 0.0 / 1.0, 1625.0 / 5184.0],
            &[
                -342497279.0 / 5618900760.0,
                6827067.0 / 46824173.0,
                35048741.0 / 102161832.0,
                -2201514.0 / 234120865.0,
            ],
            &[
                -7079.0 / 52152.0,
                767.0 / 2173.0,
                14027.0 / 52152.0,
                30.0 / 2173.0,
                0.0 / 1.0,
            ],
            &[
                4817.0 / 51600.0,
                0.0 / 1.0,
                388869.0 / 1216880.0,
                3276.0 / 23575.0,
                -1142053.0 / 22015140.0,
                0.0 / 1.0,
            ],
        ];

        const AV: &'static [&'static [f64]] = &[
            &[],
            &[8.0 / 39.0],
            &[1.0 / 13.0, 3.0 / 13.0],
            &[7385.0 / 6912.0, -9425.0 / 2304.0, 13325.0 / 3456.0],
            &[
                223324757.0 / 91364240.0,
                -174255393.0 / 18272848.0,
                382840094.0 / 46824173.0,
                -39627252.0 / 234120865.0,
            ],
            &[
                108475.0 / 36464.0,
                -9633.0 / 848.0,
                7624604.0 / 806183.0,
                8100.0 / 49979.0,
                -4568212.0 / 19446707.0,
            ],
            &[
                4817.0 / 51600.0,
                0.0 / 1.0,
                1685099.0 / 3650640.0,
                19656.0 / 23575.0,
                -53676491.0 / 88060560.0,
                53.0 / 240.0,
            ],
        ];

        const BP: &'static [f64] = &[
            4817.0 / 51600.0,
            0.0 / 1.0,
            388869.0 / 1216880.0,
            3276.0 / 23575.0,
            -1142053.0 / 22015140.0,
            0.0 / 1.0,
            0.0 / 1.0,
        ];

        const BV: &'static [f64] = &[
            4817.0 / 51600.0,
            0.0 / 1.0,
            1685099.0 / 3650640.0,
            19656.0 / 23575.0,
            -53676491.0 / 88060560.0,
            53.0 / 240.0,
            0.0 / 1.0,
        ];

        const C: &'static [f64] = &[
            0.0,
            8.0 / 39.0,
            4.0 / 13.0,
            5.0 / 6.0,
            43.0 / 47.0,
            1.0,
            1.0,
        ];
    }
    impl EERKNGCoefficients for Fine45 {
        const ORDER_EMBEDDED: u32 = 5;

        const EP: &'static [f64] = &[
            8151.0 / 2633750.0,
            0.0 / 1.0,
            -1377519.0 / 186334750.0,
            586872.0 / 28879375.0,
            -36011118.0 / 2247378875.0,
            0.0 / 1.0,
            0.0 / 1.0,
        ];

        const EV: &'static [f64] = &[
            8151.0 / 2633750.0,
            0.0 / 1.0,
            -5969249.0 / 559004250.0,
            3521232.0 / 28879375.0,
            -846261273.0 / 4494757750.0,
            4187.0 / 36750.0,
            -1.0 / 25.0,
        ];
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct BlanesMoan6B;
    impl<V, P: Problem<State = SecondOrderState<V>>> RKCoefficients<P> for BlanesMoan6B {
        type Instance = SRKN<Self, V>;
    }
    impl SRKNCoefficients for BlanesMoan6B {
        const FSAL: bool = true;

        const A: &[f64] = &[
            0.245298957184271,
            0.60487266571108,
            -0.350171622895351,
            -0.350171622895351,
            0.60487266571108,
            0.245298957184271,
            0.0,
        ];

        const B: &[f64] = &[
            0.0829844064174052,
            0.396309801498368,
            -0.0390563049223486,
            0.1195241940131508,
            -0.0390563049223486,
            0.396309801498368,
            0.0829844064174052,
        ];
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct BlanesMoan11B;
    impl<V, P: Problem<State = SecondOrderState<V>>> RKCoefficients<P> for BlanesMoan11B {
        type Instance = SRKN<Self, V>;
    }
    impl SRKNCoefficients for BlanesMoan11B {
        const FSAL: bool = true;

        const A: &[f64] = &[
            0.123229775946271,
            0.290553797799558,
            -0.127049212625417,
            -0.246331761062075,
            0.357208872795928,
            0.20477705429147,
            0.357208872795928,
            -0.246331761062075,
            -0.127049212625417,
            0.290553797799558,
            0.123229775946271,
            0.0,
        ];

        const B: &[f64] = &[
            0.0414649985182624,
            0.198128671918067,
            -0.0400061921041533,
            0.0752539843015807,
            -0.0115113874206879,
            0.2366699247869311,
            0.2366699247869311,
            -0.0115113874206879,
            0.0752539843015807,
            -0.0400061921041533,
            0.198128671918067,
            0.0414649985182624,
        ];
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct BlanesMoan14A;
    impl<V, P: Problem<State = SecondOrderState<V>>> RKCoefficients<P> for BlanesMoan14A {
        type Instance = SRKN<Self, V>;
    }
    impl SRKNCoefficients for BlanesMoan14A {
        const FSAL: bool = true;

        const A: &[f64] = &[
            0.0378593198406116,
            0.102635633102435,
            -0.0258678882665587,
            0.314241403071447,
            -0.130144459517415,
            0.106417700369543,
            -0.00879424312851058,
            0.2073050690568954,
            -0.00879424312851058,
            0.106417700369543,
            -0.130144459517415,
            0.314241403071447,
            -0.0258678882665587,
            0.102635633102435,
            0.0378593198406116,
        ];

        const B: &[f64] = &[
            0.0,
            0.09171915262446165,
            0.183983170005006,
            -0.05653436583288827,
            0.004914688774712854,
            0.143761127168358,
            0.328567693746804,
            -0.19641146648645422,
            -0.19641146648645422,
            0.328567693746804,
            0.143761127168358,
            0.004914688774712854,
            -0.05653436583288827,
            0.183983170005006,
            0.09171915262446165,
        ];
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct ForestRuth;
    impl<V, P: Problem<State = SecondOrderState<V>>> RKCoefficients<P> for ForestRuth {
        type Instance = SRKN<Self, V>;
    }
    impl SRKNCoefficients for ForestRuth {
        const FSAL: bool = true;

        const A: &[f64] = &[
            0.6756035959798288,
            -0.17560359597982883,
            -0.17560359597982883,
            0.6756035959798288,
        ];

        const B: &[f64] = &[
            0.0,
            1.3512071919596575,
            -1.7024143839193153,
            1.3512071919596575,
        ];
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct McLachlanO4;
    impl<V, P: Problem<State = SecondOrderState<V>>> RKCoefficients<P> for McLachlanO4 {
        type Instance = SRKN<Self, V>;
    }
    impl SRKNCoefficients for McLachlanO4 {
        const FSAL: bool = false;

        const A: &[f64] = &[
            0.5153528374311229,
            -0.08578201941297364,
            0.4415830236164665,
            0.12884615836538418,
        ];

        const B: &[f64] = &[
            0.1344961992774311,
            -0.22481980307942082,
            0.7563200005156683,
            0.33400360328632145,
        ];
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct McLachlanSS17;
    impl<V, P: Problem<State = SecondOrderState<V>>> RKCoefficients<P> for McLachlanSS17 {
        type Instance = SRKN<Self, V>;
    }
    impl SRKNCoefficients for McLachlanSS17 {
        const FSAL: bool = true;

        const A: &[f64] = &[
            0.06443298969072164,
            0.35519003324334714,
            0.08566935781770041,
            -0.1125142178766312,
            -0.11220270385213184,
            -0.13257320117041968,
            0.21137072073684585,
            0.2966460921549873,
            -0.15601907074441956,
            -0.15601907074441956,
            0.2966460921549873,
            0.21137072073684585,
            -0.13257320117041968,
            -0.11220270385213184,
            -0.1125142178766312,
            0.08566935781770041,
            0.35519003324334714,
            0.06443298969072164,
        ];

        const B: &[f64] = &[
            0.0,
            0.12886597938144329,
            0.581514087105251,
            -0.4101753714698501,
            0.18514693571658775,
            -0.4095523434208514,
            0.14440594108001203,
            0.27833550039367966,
            0.31495668391629483,
            -0.626994825405134,
            0.31495668391629483,
            0.27833550039367966,
            0.14440594108001203,
            -0.4095523434208514,
            0.18514693571658775,
            -0.4101753714698501,
            0.581514087105251,
            0.12886597938144329,
        ];
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct Pefrl;
    impl<V, P: Problem<State = SecondOrderState<V>>> RKCoefficients<P> for Pefrl {
        type Instance = SRKN<Self, V>;
    }
    impl SRKNCoefficients for Pefrl {
        const FSAL: bool = true;

        const A: &[f64] = {
            const XI: f64 = 0.1786178958448091;
            const CHI: f64 = -0.0662645826698185;

            &[XI, CHI, 1.0 - 2.0 * (CHI + XI), CHI, XI]
        };

        const B: &[f64] = {
            const LAMBDA: f64 = -0.2123418310626054;

            &[0.0, 0.5 - LAMBDA, LAMBDA, LAMBDA, 0.5 - LAMBDA]
        };
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct Ruth;
    impl<V, P: Problem<State = SecondOrderState<V>>> RKCoefficients<P> for Ruth {
        type Instance = SRKN<Self, V>;
    }
    impl SRKNCoefficients for Ruth {
        const FSAL: bool = false;

        const A: &[f64] = &[2.0 / 3.0, -2.0 / 3.0, 1.0];

        const B: &[f64] = &[7.0 / 24.0, 3.0 / 4.0, -1.0 / 24.0];
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct AdamsBashforth2;
    impl<P: Problem> LMCoefficients<P> for AdamsBashforth2 {
        type Instance = ELM1<Self, 2, P::State>;
    }
    impl ELM1Coefficients for AdamsBashforth2 {
        const ALPHA: &'static [f64] = &[1.0, -1.0, 0.0];

        const BETA_N: &'static [f64] = &[0.0, 3.0, -1.0];

        const BETA_D: f64 = 2.0;
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct AdamsBashforth3;
    impl<P: Problem> LMCoefficients<P> for AdamsBashforth3 {
        type Instance = ELM1<Self, 3, P::State>;
    }
    impl ELM1Coefficients for AdamsBashforth3 {
        const ALPHA: &'static [f64] = &[1.0, -1.0, 0.0, 0.0];

        const BETA_N: &'static [f64] = &[0.0, 23.0, -16.0, 5.0];

        const BETA_D: f64 = 12.0;
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct AdamsBashforth4;
    impl<P: Problem> LMCoefficients<P> for AdamsBashforth4 {
        type Instance = ELM1<Self, 4, P::State>;
    }
    impl ELM1Coefficients for AdamsBashforth4 {
        const ALPHA: &'static [f64] = &[1.0, -1.0, 0.0, 0.0, 0.0];

        const BETA_N: &'static [f64] = &[0.0, 55.0, -59.0, 37.0, -9.0];

        const BETA_D: f64 = 24.0;
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct AdamsBashforth5;
    impl<P: Problem> LMCoefficients<P> for AdamsBashforth5 {
        type Instance = ELM1<Self, 5, P::State>;
    }
    impl ELM1Coefficients for AdamsBashforth5 {
        const ALPHA: &'static [f64] = &[1.0, -1.0, 0.0, 0.0, 0.0, 0.0];

        const BETA_N: &'static [f64] = &[0.0, 1901.0, -2774.0, 2616.0, -1274.0, 251.0];

        const BETA_D: f64 = 720.0;
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct AdamsBashforth6;
    impl<P: Problem> LMCoefficients<P> for AdamsBashforth6 {
        type Instance = ELM1<Self, 6, P::State>;
    }
    impl ELM1Coefficients for AdamsBashforth6 {
        const ALPHA: &'static [f64] = &[1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0];

        const BETA_N: &'static [f64] = &[0.0, 4277.0, -7923.0, 9982.0, -7298.0, 2877.0, -475.0];

        const BETA_D: f64 = 1440.0;
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct QuinlanTremaine12;
    impl<V, P: Problem<State = SecondOrderState<V>>> LMCoefficients<P> for QuinlanTremaine12 {
        type Instance = ELM2<Self, 12, V>;
    }
    impl ELM2Coefficients for QuinlanTremaine12 {
        const ALPHA: &'static [f64] = &[
            1.0, -2.0, 2.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 2.0, -2.0, 1.0,
        ];

        const BETA_N: &'static [f64] = &[
            0.0,
            90987349.0,
            -229596838.0,
            812627169.0,
            -1628539944.0,
            2714971338.0,
            -3041896548.0,
            2714971338.0,
            -1628539944.0,
            812627169.0,
            -229596838.0,
            90987349.0,
            0.0,
        ];

        const BETA_D: f64 = 53222400.0;
    }

    #[doc(hidden)]
    #[derive(Clone, Copy, Debug)]
    pub struct Stormer13;
    impl<V, P: Problem<State = SecondOrderState<V>>> LMCoefficients<P> for Stormer13 {
        type Instance = ELM2<Self, 13, V>;
    }
    impl ELM2Coefficients for Stormer13 {
        const ALPHA: &'static [f64] = &[
            1.0, -2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        ];

        const BETA_N: &'static [f64] = &[
            0.0,
            4_6211_5547_1343.0,
            -13_2328_4191_4856.0,
            47_0137_4372_6958.0,
            -114_3217_0067_2600.0,
            202_2719_6761_1865.0,
            -266_6095_4958_4656.0,
            264_4290_2189_5332.0,
            -197_1068_0827_6656.0,
            108_9829_3333_3425.0,
            -43_4275_9282_8040.0,
            11_8071_4397_8638.0,
            -1_9627_7757_4776.0,
            1506_5357_0023.0,
        ];

        const BETA_D: f64 = 2_6153_4873_6000.0;
    }
}
